package com.example.tradernet_test_task_simplified.data.model.response

import java.math.BigDecimal

data class QuoteModel(
    val acd: Int? = null,
    val baf: Int? = null,
    val bap: Double? = null,
    val bas: Int? = null,
    val base_contract_code: String? = null,
    val base_currency: String? = null,
    val base_ltr: String? = null,
    val bat: String? = null,
    val bbf: Int? = null,
    val bbp: Double? = null,
    val bbs: Int? = null,
    val bbt: String? = null,
    val c: String? = null,
    val chg: BigDecimal? = null,
    val chg110: Double? = null,
    val chg22: Double? = null,
    val chg220: Double? = null,
    val chg5: Double? = null,
    val ClosePrice: Double? = null,
    val codesub_nm: String? = null,
    val cpn: Int? = null,
    val cpp: Int? = null,
    val delta: Int? = null,
    val dpb: Int? = null,
    val dps: Int? = null,
    val emitent_type: String? = null,
    val fv: Int? = null,
    val gamma: Int? = null,
    val init: Int? = null,
    val ipo: String? = null,
    val issue_nb: String? = null,
    val kind: Int? = null,
    val ltp: BigDecimal? = null,
    val ltr: String? = null,
    val lts: Int? = null,
    val ltt: String? = null,
    val marketStatus: String? = null,
    val maxtp: Double? = null,
    val min_step: BigDecimal? = null,
    val mintp: Double? = null,
    val mrg: String? = null,
    val mtd: String? = null,
    val n: Int? = null,
    val name: String? = null,
    val name2: String? = null,
    val ncd: String? = null,
    val ncp: Int? = null,
    val op: Double? = null,
    val option_type: String? = null,
    val otc_instr: String? = null,
    val p110: Double? = null,
    val p22: Double? = null,
    val p220: Double? = null,
    val p5: Double? = null,
    val pcp: BigDecimal? = null,
    val pp: Double? = null,
    val quote_basis: String? = null,
    val rev: Int? = null,
    val scheme_calc: String? = null,
    val step_price: Double? = null,
    val strike_price: Int? = null,
    val theta: Int? = null,
    val trades: Int? = null,
    val TradingReferencePrice: Int? = null,
    val TradingSessionSubID: String? = null,
    val type: Int? = null,
    val UTCOffset: Int? = null,
    val virt_base_instr: String? = null,
    val vlt: Double? = null,
    val vol: BigDecimal? = null,
    val Volatility: Int? = null,
    val x_agg_futures: String? = null,
    val x_curr: String? = null,
    val x_currVal: Double? = null,
    val x_descr: String? = null,
    val x_dsc1: Int? = null,
    val x_dsc1_reception: String? = null,
    val x_dsc2: Int? = null,
    val x_dsc2_reception: String? = null,
    val x_dsc3: Int? = null,
    val x_istrade: Int? = null,
    val x_lot: Int? = null,
    val x_max: Double? = null,
    val x_min: Double? = null,
    val x_min_lot_q: Int? = null,
    val x_short: Int? = null,
    val x_short_reception: String? = null,
    val yld: Int? = null,
    val yld_ytm_ask: Int? = null,
    val yld_ytm_bid: Int? = null
)

fun QuoteModel.toQuote() = if (!c.isNullOrEmpty()) {
    Quote(
        ticker = c,
        priceChangeInPoints = chg,
        latestTradePrice = ltp,
        exchangeOfLatestTrade = ltr,
        name = name,
        minStep = min_step,
        priceChangeByPercentage = pcp,
        percentageChangeText = pcp?.let { percent ->
            if (percent > BigDecimal.ZERO) "+$percent%" else "$percent%"
        },
        priceChangeInPointsText = chg?.roundToMinStep(min_step),
        latestTradePriceText = ltp?.roundToMinStep(min_step),
        animationDirection = AnimationDirection.NONE,
        shouldAnimatePercentageChange = false
    )
} else {
    null
}

